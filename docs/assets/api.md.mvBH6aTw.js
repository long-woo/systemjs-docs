import{_ as s,o as i,c as e,R as a}from"./chunks/framework.lUe35HZ2.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{"sidebar":false,"next":{"text":"Hooks","link":"/hooks"}},"headers":[],"relativePath":"api.md","filePath":"api.md"}'),t={name:"api.md"},l=a(`<h2 id="systemjs-api" tabindex="-1">SystemJS API <a class="header-anchor" href="#systemjs-api" aria-label="Permalink to &quot;SystemJS API&quot;">​</a></h2><h3 id="core-api-s-js-system-js" tabindex="-1">Core API (s.js &amp; system.js) <a class="header-anchor" href="#core-api-s-js-system-js" aria-label="Permalink to &quot;Core API (s.js &amp; system.js)&quot;">​</a></h3><h4 id="system-constructor" tabindex="-1">System.constructor <a class="header-anchor" href="#system-constructor" aria-label="Permalink to &quot;System.constructor&quot;">​</a></h4><p>Type: <code>Function</code></p><p>This represents the System base class, which can be extended or reinstantiated to create a custom System instance.</p><p>Example:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clonedSystem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  clonedSystem.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// imports in a custom context</span></span></code></pre></div><h4 id="system-import-id-parenturl-promise-module" tabindex="-1">System.import(id [, parentURL]) -&gt; Promise(Module) <a class="header-anchor" href="#system-import-id-parenturl-promise-module" aria-label="Permalink to &quot;System.import(id [, parentURL]) -&gt; Promise(Module)&quot;">​</a></h4><p>Type: <code>Function</code></p><p>Loads a module by name taking an optional normalized parent URL argument.</p><p>Promise resolves to the ES module namespace value.</p><p><em>Note: If provided, <code>parentURL</code> must be a valid URL, or URL resolution may break.</em></p><h4 id="system-register-deps-declare" tabindex="-1">System.register(deps, declare) <a class="header-anchor" href="#system-register-deps-declare" aria-label="Permalink to &quot;System.register(deps, declare)&quot;">​</a></h4><p>Type: <code>Function</code></p><p>Declaration function for defining modules of the <code>System.register</code> polyfill module format.</p><p><a href="./system-register.html">Read more on the format at the loader polyfill page</a></p><p><em>Note: Named System.register is only supported through the named-register extra.</em></p><h4 id="system-resolve-id-parenturl-string" tabindex="-1">System.resolve(id [, parentURL]) -&gt; string <a class="header-anchor" href="#system-resolve-id-parenturl-string" aria-label="Permalink to &quot;System.resolve(id [, parentURL]) -&gt; string&quot;">​</a></h4><p>Type: <code>Function</code></p><p>Resolves a module specifier relative to an optional parent URL, returning the resolved URL.</p><h4 id="system-firstglobalprop-boolean" tabindex="-1">System.firstGlobalProp: boolean <a class="header-anchor" href="#system-firstglobalprop-boolean" aria-label="Permalink to &quot;System.firstGlobalProp: boolean&quot;">​</a></h4><p>Type: <code>Boolean</code></p><p>Applies to the global loading extra.</p><p>Setting <code>System.firstGlobalProp = true</code> will ensure that the global loading extra will always use the first new global defined as the global module value, and not the last new global defined.</p><p>For example, if importing the module <code>global.js</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>System.import(&#39;./global.js&#39;)</code> would usually <code>{ default: &#39;b&#39; }</code>.</p><p>Setting <code>System.firstGlobalProp = true</code> would ensure the above returns <code>{ default: &#39;a&#39; }</code>.</p><blockquote><p>Note: This will likely be the default in the next major release.</p></blockquote><h3 id="registry-api-system-js-only" tabindex="-1">Registry API (system.js only) <a class="header-anchor" href="#registry-api-system-js-only" aria-label="Permalink to &quot;Registry API (system.js only)&quot;">​</a></h3><blockquote><p>Note: The registry API is <strong>not recommended</strong> for standard module loading workflows. It is designed more for tooling built around SystemJS such as hot-reloading workflows. If you find yourself wanting to define a module, rather try to restructure your module architecture around standard module import loading principles and import maps (and the same goes for named System.register).</p></blockquote><h4 id="system-delete-id-boolean" tabindex="-1">System.delete(id) -&gt; Boolean <a class="header-anchor" href="#system-delete-id-boolean" aria-label="Permalink to &quot;System.delete(id) -&gt; Boolean&quot;">​</a></h4><p>Type: <code>Function</code></p><p>Deletes a module from the registry by ID.</p><p>Returns true if the module was found in the registry before deletion.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://site.com/normalized/module/name.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="system-get-id-module" tabindex="-1">System.get(id) -&gt; Module <a class="header-anchor" href="#system-get-id-module" aria-label="Permalink to &quot;System.get(id) -&gt; Module&quot;">​</a></h4><p>Type: <code>Function</code></p><p>Retrieve a loaded module from the registry by ID.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://site.com/normalized/module/name.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exportedFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Module records with an error state will return <code>null</code>.</p><h4 id="system-has-id-boolean" tabindex="-1">System.has(id) -&gt; Boolean <a class="header-anchor" href="#system-has-id-boolean" aria-label="Permalink to &quot;System.has(id) -&gt; Boolean&quot;">​</a></h4><p>Type: <code>Function</code></p><p>Determine if a given ID is available in the loader registry.</p><p>Module records that have an error state in the registry still return <code>true</code>, while module records with in-progress loads will return <code>false</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://site.com/normalized/module/name.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="system-set-id-module-module" tabindex="-1">System.set(id, module) -&gt; Module <a class="header-anchor" href="#system-set-id-module-module" aria-label="Permalink to &quot;System.set(id, module) -&gt; Module&quot;">​</a></h4><p>Type: <code>Function</code></p><p>Sets a module in the registry by ID. Note that when using import maps, the id must be a URL.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://site.com/normalized/module/name.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  exportedFunction: value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><code>module</code> is an object of names to set as the named exports.</p><p>If <code>module</code> is an existing Module Namespace, it will be used by reference.</p><p>If you want to remap the url to a bare specifier, you can do so with an import map:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;systemjs-importmap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &quot;imports&quot;: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &quot;@angular/core&quot;: &quot;app:@angular/core&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Using the &#39;app:&#39; prefix makes the string a URL instead of a bare specifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app:@angular/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, window.angularCore);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@angular/core&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="system-entries-iterator-key-module" tabindex="-1">System.entries() -&gt; Iterator&lt;[key, module]&gt; <a class="header-anchor" href="#system-entries-iterator-key-module" aria-label="Permalink to &quot;System.entries() -&gt; Iterator&lt;[key, module]&gt;&quot;">​</a></h4><p>Type: <code>Function</code></p><p>Allows you to retrieve all modules in the System registry. Each value will be an array with two values: a key and the module.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;http://localhost/path-to-file.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ns); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { exportName: &#39;value&#39; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="system-addimportmap-map-base" tabindex="-1">System.addImportMap(map [, base]) <a class="header-anchor" href="#system-addimportmap-map-base" aria-label="Permalink to &quot;System.addImportMap(map [, base])&quot;">​</a></h4><p>Type: <code>Function</code></p><p>Allows adding an import map without using the DOM.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addImportMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;imports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;y&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/y.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div>`,62),n=[l];function p(h,o,r,d,k,c){return i(),e("div",null,n)}const g=s(t,[["render",p]]);export{y as __pageData,g as default};
